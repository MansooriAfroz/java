6C) Write a program in Spring JDBC to demonstrate
ResultSetExtractor Interface.
CODE:
a. employeetemp.java:
package something.datapro3;
import
java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import
java.sql.ResultSet;
import
javax.sql.DataSource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.dao.DataAccessException;
import
63
org.springframework.jdbc.core.ResultSetExtractor;
import
org.springframework.jdbc.core.PreparedStatementCallba
ck; public class employeetemp implements
EmployeeDao {
private DataSource dataSource;
private JdbcTemplate jdbcTemplateObject;
public String name;
public Integer age;
public void setDataSource(DataSource dataSource) {
this.dataSource = dataSource;
this.jdbcTemplateObject = new JdbcTemplate(dataSource);
}
public List<employee> listEmployeeWithResultSet()
{ String SQL = "select * from employee_27";
List <employee> employees = jdbcTemplateObject.query(SQL,
new
EmployeeResultsetExtractor()
); return employees;
}
@Override
public void insert(Integer id, String name, Integer age) {
// TODO Auto-generated method stub
}
@Override
public void update(Integer id, String name, Integer age) {
// TODO Auto-generated method stub
}
@Override
public void delete(Integer id) {
// TODO Auto-generated method stub
}
64
}
b. EmployeeDao.java:
package something.datapro3;
import java.util.list;
import javax.sql.DataSource;
import org.springframework.jdbc.core.jdbcTemplate;
public interface EmployeeDao {
public void setDataSource(DataSource ds);
public void insert(Integer id,String name, Integer age);
public void update(Integer id,String name,Integer age);
public void delete(Integer id);
}
c. App.java:
package something.datapro3;
import java.util.List;
import org.springframework.context.ApplicationContext;
import
org.springframework.context.support.ClassPathXmlApplicationContext
t;
public class App
{
public static void main( String[] args )
{
65
ApplicationContext context =new
ClassPathXmlApplicationContext("dbd.xml");
employeetemp et =
(employeetemp)context.getBean("employeejdbctemp");
System.out.println("Listing Records Using Result Set" );
List<employee> employees1
=et.listEmployeeWithResultSet(); for (employee record :
employees1) {
System.out.print("ID : " + record.getId() );
System.out.print(", Name : " +
record.getName() ); System.out.println(",
Age : " + record.getAge());
}}}
d. employee.java
package something.datapro3;
public class employee
{ private Integer
age; private
String name;
private Integer id;
public
employee(){}
public employee(String name,Integer id, Integer age) {
this.id = id;
this.name =
66
name;
this.age=age;
}
public void setAge(Integer age) {
this.age = age;
}
public Integer getAge() {
return age;
}
public void setName(String name) {
this.name = name;
}
public String getName() {
return name;
}
public void setId(Integer id) {
this.id = id;
}
public Integer getId() {
return id;
}
}
e. EmployeeResultsetExtractor.java:
package something.datapro3;
import java.util.ArrayList;
import java.util.List;
67
import
java.sql.ResultSet;
import java.sql.SQLException;
import org.springframework.dao.DataAccessException;
import
org.springframework.jdbc.core.ResultSetExtractor;
import something.datapro3.employee;
public class EmployeeResultsetExtractor implements
ResultSetExtractor<List<employee>> {
public List<employee> extractData(ResultSet rs) throws
SQLException,
DataAccessException {
List<employee> employeeList = new
ArrayList<employee>(); System.out.print("Result
Extractor Called"); while(rs.next()) {
employee emp = new employee();
emp.setId(rs.getInt("id"));
emp.setName(rs.getString("name"));
emp.setAge(rs.getInt("age"));
employeeList.add(emp);
}
return employeeList;
}
}
O